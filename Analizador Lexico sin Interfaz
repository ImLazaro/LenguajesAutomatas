# analyzer.py
import ply.lex as lex

# 1) Definición de palabras reservadas y su clasificación
reserved = {
    'robot':   ('Palabra_r',       False),
    'iniciar': ('Accion',          False),
    'detener': ('Accion',          False),
    # métodos que reciben parámetro numérico
    'base':    ('Metodo',          True),
    'cuerpo':  ('Metodo',          True),
    'garra':   ('Metodo',          True),
    'rotar':   ('Metodo',          True),
    'mover':   ('Metodo',          True),
    'subir':   ('Metodo',          True),
    'bajar':   ('Metodo',          True),
    'abrir':   ('Metodo',          True),
    'cerrar':  ('Metodo',          True),
}

# 2) Lista de tokens
tokens = [
    'ID',       # identificadores (p.e. r1)
    'NUMBER',   # números enteros
    'SEMICOLON','LPAREN','RPAREN','DOT','EQUAL'
] + [name.upper() for name in reserved]

# 3) Reglas regex para tokens sencillos
t_SEMICOLON = r';'
t_LPAREN    = r'\('
t_RPAREN    = r'\)'
t_DOT       = r'\.'
t_EQUAL     = r'='

t_ignore = ' \t\n'

# 4) Número
def t_NUMBER(t):
    r'\d+'
    t.value = int(t.value)
    return t

# 5) Identificador o palabra reservada
def t_ID(t):
    r'[a-zA-Z_][a-zA-Z0-9_]*'
    key = t.value.lower()
    if key in reserved:
        # reasignamos el tipo de token
        t.type = key.upper()
    return t

# 6) Error léxico
def t_error(t):
    print(f"Error léxico: carácter ilegal {t.value[0]!r}")
    t.lexer.skip(1)

# 7) Construcción del lexer
lexer = lex.lex()

# 8) Función para procesar y mostrar tabla
def analizar(texto):
    # cabecera de tabla
    print(f"{'LEXEMA':<12}{'TIPO':<12}{'VALOR':<8}{'PARAMETRIZABLE'}")
    print('-'*45)
    lexer.input(texto)
    for tok in lexer:
        lex = tok.value if tok.type=='NUMBER' else tok.value
        tipo = ''
        valor = ''
        param = 'No'
        # clasificamos según reserved o token genérico
        if tok.type in reserved.keys() or tok.type.lower() in reserved:
            cls, parametrizable = reserved[tok.value.lower()]
            tipo = cls
            param = 'Si' if parametrizable else 'No'
            # si es método, el valor lo toma del siguiente NUMBER tras un '=' o espacio
            if parametrizable:
                # miramos el siguiente token
                next_tok = lexer.token()
                if next_tok and next_tok.type=='EQUAL':
                    num_tok = lexer.token()
                    if num_tok and num_tok.type=='NUMBER':
                        valor = num_tok.value
                # devolvemos el token que leímos de más
                if next_tok:
                    lexer.lexpos -= len(str(next_tok.value))
        elif tok.type=='ID':
            tipo = 'Identificador'
        elif tok.type=='NUMBER':
            tipo = 'Number'
            valor = tok.value
        else:
            tipo = tok.type
        print(f"{str(lex):<12}{tipo:<12}{str(valor):<8}{param}")

if _name=='main_':
    import sys
    if len(sys.argv)!=2:
        print("Uso: python lex.py programa.txt")
        sys.exit(1)
    texto = open(sys.argv[1], encoding='utf-8').read()
    analizar(texto)
